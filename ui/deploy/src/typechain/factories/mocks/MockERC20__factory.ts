/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Addressable } from "ethers";
import { Contract, ContractFactory, ContractTransactionResponse, Interface } from "ethers"
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers"
import type { NonPayableOverrides } from "../../common.js"
  import type { MockERC20, MockERC20Interface } from "../../mocks/MockERC20.js";

  const _abi = [
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "internalType": "address",
        "name": "owner",
        "type": "address"
      },
      {
        "indexed": true,
        "internalType": "address",
        "name": "spender",
        "type": "address"
      },
      {
        "indexed": false,
        "internalType": "uint256",
        "name": "value",
        "type": "uint256"
      }
    ],
    "name": "Approval",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "internalType": "address",
        "name": "from",
        "type": "address"
      },
      {
        "indexed": true,
        "internalType": "address",
        "name": "to",
        "type": "address"
      },
      {
        "indexed": false,
        "internalType": "uint256",
        "name": "value",
        "type": "uint256"
      }
    ],
    "name": "Transfer",
    "type": "event"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "",
        "type": "address"
      },
      {
        "internalType": "address",
        "name": "",
        "type": "address"
      }
    ],
    "name": "allowance",
    "outputs": [
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "spender",
        "type": "address"
      },
      {
        "internalType": "uint256",
        "name": "amount",
        "type": "uint256"
      }
    ],
    "name": "approve",
    "outputs": [
      {
        "internalType": "bool",
        "name": "",
        "type": "bool"
      }
    ],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "",
        "type": "address"
      }
    ],
    "name": "balanceOf",
    "outputs": [
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "decimals",
    "outputs": [
      {
        "internalType": "uint8",
        "name": "",
        "type": "uint8"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "to",
        "type": "address"
      },
      {
        "internalType": "uint256",
        "name": "amount",
        "type": "uint256"
      }
    ],
    "name": "mint",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "name",
    "outputs": [
      {
        "internalType": "string",
        "name": "",
        "type": "string"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "symbol",
    "outputs": [
      {
        "internalType": "string",
        "name": "",
        "type": "string"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "from",
        "type": "address"
      },
      {
        "internalType": "address",
        "name": "to",
        "type": "address"
      },
      {
        "internalType": "uint256",
        "name": "amount",
        "type": "uint256"
      }
    ],
    "name": "transferFrom",
    "outputs": [
      {
        "internalType": "bool",
        "name": "",
        "type": "bool"
      }
    ],
    "stateMutability": "nonpayable",
    "type": "function"
  }
] as const;

  const _bytecode = "0x60806040526040518060400160405280600481526020017f4d6f636b000000000000000000000000000000000000000000000000000000008152505f908161004791906102f6565b506040518060400160405280600481526020017f4d4f434b000000000000000000000000000000000000000000000000000000008152506001908161008c91906102f6565b50601260025f6101000a81548160ff021916908360ff1602179055503480156100b3575f5ffd5b506103c5565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061013457607f821691505b602082108103610147576101466100f0565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026101a97fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261016e565b6101b3868361016e565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f6101f76101f26101ed846101cb565b6101d4565b6101cb565b9050919050565b5f819050919050565b610210836101dd565b61022461021c826101fe565b84845461017a565b825550505050565b5f5f905090565b61023b61022c565b610246818484610207565b505050565b5b818110156102695761025e5f82610233565b60018101905061024c565b5050565b601f8211156102ae5761027f8161014d565b6102888461015f565b81016020851015610297578190505b6102ab6102a38561015f565b83018261024b565b50505b505050565b5f82821c905092915050565b5f6102ce5f19846008026102b3565b1980831691505092915050565b5f6102e683836102bf565b9150826002028217905092915050565b6102ff826100b9565b67ffffffffffffffff811115610318576103176100c3565b5b610322825461011d565b61032d82828561026d565b5f60209050601f83116001811461035e575f841561034c578287015190505b61035685826102db565b8655506103bd565b601f19841661036c8661014d565b5f5b828110156103935784890151825560018201915060208501945060208101905061036e565b868310156103b057848901516103ac601f8916826102bf565b8355505b6001600288020188555050505b505050505050565b610bf4806103d25f395ff3fe608060405234801561000f575f5ffd5b5060043610610086575f3560e01c806340c10f191161005957806340c10f191461012657806370a082311461014257806395d89b4114610172578063dd62ed3e1461019057610086565b806306fdde031461008a578063095ea7b3146100a857806323b872dd146100d8578063313ce56714610108575b5f5ffd5b6100926101c0565b60405161009f91906107fa565b60405180910390f35b6100c260048036038101906100bd91906108ab565b61024b565b6040516100cf9190610903565b60405180910390f35b6100f260048036038101906100ed919061091c565b610338565b6040516100ff9190610903565b60405180910390f35b6101106105fb565b60405161011d9190610987565b60405180910390f35b610140600480360381019061013b91906108ab565b61060d565b005b61015c600480360381019061015791906109a0565b6106c9565b60405161016991906109da565b60405180910390f35b61017a6106de565b60405161018791906107fa565b60405180910390f35b6101aa60048036038101906101a591906109f3565b61076a565b6040516101b791906109da565b60405180910390f35b5f80546101cc90610a5e565b80601f01602080910402602001604051908101604052809291908181526020018280546101f890610a5e565b80156102435780601f1061021a57610100808354040283529160200191610243565b820191905f5260205f20905b81548152906001019060200180831161022657829003601f168201915b505050505081565b5f8160045f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161032691906109da565b60405180910390a36001905092915050565b5f5f60045f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050828110156103f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ef90610ad8565b60405180910390fd5b5f60035f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205490508381101561047c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047390610b40565b60405180910390fd5b83820360045f8873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f208190555083810360035f8873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508360035f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040516105e691906109da565b60405180910390a36001925050509392505050565b60025f9054906101000a900460ff1681565b8060035f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282546106599190610b8b565b925050819055508173ffffffffffffffffffffffffffffffffffffffff165f73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516106bd91906109da565b60405180910390a35050565b6003602052805f5260405f205f915090505481565b600180546106eb90610a5e565b80601f016020809104026020016040519081016040528092919081815260200182805461071790610a5e565b80156107625780601f1061073957610100808354040283529160200191610762565b820191905f5260205f20905b81548152906001019060200180831161074557829003601f168201915b505050505081565b6004602052815f5260405f20602052805f5260405f205f91509150505481565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f6107cc8261078a565b6107d68185610794565b93506107e68185602086016107a4565b6107ef816107b2565b840191505092915050565b5f6020820190508181035f83015261081281846107c2565b905092915050565b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6108478261081e565b9050919050565b6108578161083d565b8114610861575f5ffd5b50565b5f813590506108728161084e565b92915050565b5f819050919050565b61088a81610878565b8114610894575f5ffd5b50565b5f813590506108a581610881565b92915050565b5f5f604083850312156108c1576108c061081a565b5b5f6108ce85828601610864565b92505060206108df85828601610897565b9150509250929050565b5f8115159050919050565b6108fd816108e9565b82525050565b5f6020820190506109165f8301846108f4565b92915050565b5f5f5f606084860312156109335761093261081a565b5b5f61094086828701610864565b935050602061095186828701610864565b925050604061096286828701610897565b9150509250925092565b5f60ff82169050919050565b6109818161096c565b82525050565b5f60208201905061099a5f830184610978565b92915050565b5f602082840312156109b5576109b461081a565b5b5f6109c284828501610864565b91505092915050565b6109d481610878565b82525050565b5f6020820190506109ed5f8301846109cb565b92915050565b5f5f60408385031215610a0957610a0861081a565b5b5f610a1685828601610864565b9250506020610a2785828601610864565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680610a7557607f821691505b602082108103610a8857610a87610a31565b5b50919050565b7f414c4c4f57414e434500000000000000000000000000000000000000000000005f82015250565b5f610ac2600983610794565b9150610acd82610a8e565b602082019050919050565b5f6020820190508181035f830152610aef81610ab6565b9050919050565b7f42414c414e4345000000000000000000000000000000000000000000000000005f82015250565b5f610b2a600783610794565b9150610b3582610af6565b602082019050919050565b5f6020820190508181035f830152610b5781610b1e565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f610b9582610878565b9150610ba083610878565b9250828201905080821115610bb857610bb7610b5e565b5b9291505056fea2646970667358221220e3f9fee2ab8980379de6910d1165904842ca87628e0bb04cdb4b419c7412dd1364736f6c634300081c0033";

  
      type MockERC20ConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

      const isSuperArgs = (xs: MockERC20ConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
        xs.length > 1
    

  export class MockERC20__factory extends ContractFactory {
    
      constructor(...args: MockERC20ConstructorParams) {
        if (isSuperArgs(args)) {
          super(...args);
        } else {
          super(_abi, _bytecode, args[0]);
        }
        
      }
    
    override getDeployTransaction(overrides?: NonPayableOverrides & { from?: string }): Promise<ContractDeployTransaction> {
      return super.getDeployTransaction(overrides || {});
    };
    override deploy(overrides?: NonPayableOverrides & { from?: string }) {
      return super.deploy(overrides || {}) as Promise<MockERC20 & {
        deploymentTransaction(): ContractTransactionResponse;
      }>;
    }
    override connect(runner: ContractRunner | null): MockERC20__factory {
      return super.connect(runner) as MockERC20__factory;
    }
    
    
    static readonly bytecode = _bytecode;
    static readonly abi = _abi;
    static createInterface(): MockERC20Interface {
      return new Interface(_abi) as MockERC20Interface;
    }
    
    override attach(address: string | Addressable): MockERC20 {
      return super.attach(address) as MockERC20;
    }
  static connect(address: string, runner?: ContractRunner | null): MockERC20 {
      return new Contract(address, _abi, runner) as unknown as MockERC20;
    }
  }

  
  