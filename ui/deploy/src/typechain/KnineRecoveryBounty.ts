/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common.js"
  

  export interface KnineRecoveryBountyInterface extends Interface {
    getFunction(nameOrSignature: "AMOUNT" | "DEADLINE" | "EXPLOITER" | "KNINE" | "TERMS_HASH" | "TREASURY" | "owner" | "ownerWithdraw" | "recoverKnine" | "renounceOwnership" | "transferOwnership"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "DealFinalized" | "OwnershipTransferred"): EventFragment;

    encodeFunctionData(functionFragment: 'AMOUNT', values?: undefined): string;
encodeFunctionData(functionFragment: 'DEADLINE', values?: undefined): string;
encodeFunctionData(functionFragment: 'EXPLOITER', values?: undefined): string;
encodeFunctionData(functionFragment: 'KNINE', values?: undefined): string;
encodeFunctionData(functionFragment: 'TERMS_HASH', values?: undefined): string;
encodeFunctionData(functionFragment: 'TREASURY', values?: undefined): string;
encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
encodeFunctionData(functionFragment: 'ownerWithdraw', values?: undefined): string;
encodeFunctionData(functionFragment: 'recoverKnine', values?: undefined): string;
encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
encodeFunctionData(functionFragment: 'transferOwnership', values: [AddressLike]): string;

    decodeFunctionResult(functionFragment: 'AMOUNT', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'DEADLINE', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'EXPLOITER', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'KNINE', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'TERMS_HASH', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'TREASURY', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'ownerWithdraw', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'recoverKnine', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  }

  
    export namespace DealFinalizedEvent {
      export type InputTuple = [exploiter: AddressLike, paidEth: BigNumberish, termsHash: BytesLike];
      export type OutputTuple = [exploiter: string, paidEth: bigint, termsHash: string];
      export interface OutputObject {exploiter: string, paidEth: bigint, termsHash: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace OwnershipTransferredEvent {
      export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
      export type OutputTuple = [previousOwner: string, newOwner: string];
      export interface OutputObject {previousOwner: string, newOwner: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface KnineRecoveryBounty extends BaseContract {
    
    connect(runner?: ContractRunner | null): KnineRecoveryBounty;
    waitForDeployment(): Promise<this>;

    interface: KnineRecoveryBountyInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    AMOUNT: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    DEADLINE: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    EXPLOITER: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    KNINE: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    TERMS_HASH: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    TREASURY: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    owner: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    ownerWithdraw: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    recoverKnine: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    renounceOwnership: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    transferOwnership: TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'AMOUNT'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'DEADLINE'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'EXPLOITER'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'KNINE'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'TERMS_HASH'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'TREASURY'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'owner'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'ownerWithdraw'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'recoverKnine'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'renounceOwnership'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'transferOwnership'): TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >;

    getEvent(key: 'DealFinalized'): TypedContractEvent<DealFinalizedEvent.InputTuple, DealFinalizedEvent.OutputTuple, DealFinalizedEvent.OutputObject>;
getEvent(key: 'OwnershipTransferred'): TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;

    filters: {
      
      'DealFinalized(address,uint256,bytes32)': TypedContractEvent<DealFinalizedEvent.InputTuple, DealFinalizedEvent.OutputTuple, DealFinalizedEvent.OutputObject>;
      DealFinalized: TypedContractEvent<DealFinalizedEvent.InputTuple, DealFinalizedEvent.OutputTuple, DealFinalizedEvent.OutputObject>;
    

      'OwnershipTransferred(address,address)': TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
      OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
    
    };
  }