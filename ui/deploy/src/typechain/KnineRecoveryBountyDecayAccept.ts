/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common.js"
  

  export interface KnineRecoveryBountyDecayAcceptInterface extends Interface {
    getFunction(nameOrSignature: "AMOUNT" | "DECAY" | "EXPLOITER" | "INITIAL" | "IPFS_TERMS_URI" | "KNINE" | "START" | "TERMS_HASH" | "TREASURY" | "accept" | "acceptedAt" | "finalized" | "recoverKnine" | "withdrawToTreasury"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "Accepted" | "DealFinalized"): EventFragment;

    encodeFunctionData(functionFragment: 'AMOUNT', values?: undefined): string;
encodeFunctionData(functionFragment: 'DECAY', values?: undefined): string;
encodeFunctionData(functionFragment: 'EXPLOITER', values?: undefined): string;
encodeFunctionData(functionFragment: 'INITIAL', values?: undefined): string;
encodeFunctionData(functionFragment: 'IPFS_TERMS_URI', values?: undefined): string;
encodeFunctionData(functionFragment: 'KNINE', values?: undefined): string;
encodeFunctionData(functionFragment: 'START', values?: undefined): string;
encodeFunctionData(functionFragment: 'TERMS_HASH', values?: undefined): string;
encodeFunctionData(functionFragment: 'TREASURY', values?: undefined): string;
encodeFunctionData(functionFragment: 'accept', values?: undefined): string;
encodeFunctionData(functionFragment: 'acceptedAt', values?: undefined): string;
encodeFunctionData(functionFragment: 'finalized', values?: undefined): string;
encodeFunctionData(functionFragment: 'recoverKnine', values?: undefined): string;
encodeFunctionData(functionFragment: 'withdrawToTreasury', values?: undefined): string;

    decodeFunctionResult(functionFragment: 'AMOUNT', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'DECAY', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'EXPLOITER', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'INITIAL', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'IPFS_TERMS_URI', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'KNINE', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'START', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'TERMS_HASH', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'TREASURY', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'accept', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'acceptedAt', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'finalized', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'recoverKnine', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'withdrawToTreasury', data: BytesLike): Result;
  }

  
    export namespace AcceptedEvent {
      export type InputTuple = [at: BigNumberish, termsHash: BytesLike];
      export type OutputTuple = [at: bigint, termsHash: string];
      export interface OutputObject {at: bigint, termsHash: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace DealFinalizedEvent {
      export type InputTuple = [exploiter: AddressLike, paidEth: BigNumberish, termsHash: BytesLike];
      export type OutputTuple = [exploiter: string, paidEth: bigint, termsHash: string];
      export interface OutputObject {exploiter: string, paidEth: bigint, termsHash: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface KnineRecoveryBountyDecayAccept extends BaseContract {
    
    connect(runner?: ContractRunner | null): KnineRecoveryBountyDecayAccept;
    waitForDeployment(): Promise<this>;

    interface: KnineRecoveryBountyDecayAcceptInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    AMOUNT: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    DECAY: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    EXPLOITER: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    INITIAL: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    IPFS_TERMS_URI: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    KNINE: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    START: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    TERMS_HASH: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    TREASURY: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    accept: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    acceptedAt: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    finalized: TypedContractMethod<
      [],
      [boolean],
      'view'
    >
    

    
    recoverKnine: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    withdrawToTreasury: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'AMOUNT'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'DECAY'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'EXPLOITER'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'INITIAL'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'IPFS_TERMS_URI'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'KNINE'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'START'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'TERMS_HASH'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'TREASURY'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'accept'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'acceptedAt'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'finalized'): TypedContractMethod<
      [],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'recoverKnine'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'withdrawToTreasury'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;

    getEvent(key: 'Accepted'): TypedContractEvent<AcceptedEvent.InputTuple, AcceptedEvent.OutputTuple, AcceptedEvent.OutputObject>;
getEvent(key: 'DealFinalized'): TypedContractEvent<DealFinalizedEvent.InputTuple, DealFinalizedEvent.OutputTuple, DealFinalizedEvent.OutputObject>;

    filters: {
      
      'Accepted(uint256,bytes32)': TypedContractEvent<AcceptedEvent.InputTuple, AcceptedEvent.OutputTuple, AcceptedEvent.OutputObject>;
      Accepted: TypedContractEvent<AcceptedEvent.InputTuple, AcceptedEvent.OutputTuple, AcceptedEvent.OutputObject>;
    

      'DealFinalized(address,uint256,bytes32)': TypedContractEvent<DealFinalizedEvent.InputTuple, DealFinalizedEvent.OutputTuple, DealFinalizedEvent.OutputObject>;
      DealFinalized: TypedContractEvent<DealFinalizedEvent.InputTuple, DealFinalizedEvent.OutputTuple, DealFinalizedEvent.OutputObject>;
    
    };
  }